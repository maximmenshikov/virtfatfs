#!/bin/bash

export TOP_DIR="$(cd "$(dirname "$(which "$0")")" ; pwd -P)"

cd ${TOP_DIR}

function fail()
{
	if [ $# -ne 0 ] ; then
		echo $@ >&2
	fi
	exit 1
}

function usage()
{
	if [ $# -ne 0 ] ; then
		echo $@ >&2
	fi
	echo "Usage: $0 data_dir img_file img_size" >&2
	echo "Create a FATFS image with given content and size" >&2
	echo >&2
	echo "       data_dir          directory with data" >&2
	echo "       img_file          output image file" >&2
	echo "       img_size          output image size in MB" >&2
	echo >&2
	echo "Examples:" >&2
	echo "$0 /home/test/data test.img 2000" >&2
	fail
}

data_dir="$1"
img_file="$2"
img_size="$3"

if [ "$1" == "" ] ; then
	usage
fi

if [ ! -d ${data_dir} ] ; then
	usage "Directory is missing: ${data_dir}"
fi

if [ "${img_file}" == "" ] ; then
	usage "Image file is not set"

fi

if [ "${img_size}" == "" ] ; then
	usage "Image size is not set"
fi

which udisksctl > /dev/null || fail "udisksctl is not installed"
which rsync > /dev/null || fail "rsync is not installed"
which sync > /dev/null || fail "sync is not installed"

dd if=/dev/zero "of=${img_file}" "count=${img_size}" bs=1M \
	> /dev/null 2> /dev/null \
	|| fail "Failed to allocate FAT image"
mkfs.fat "${img_file}" \
	> /dev/null \
	|| fail "Failed to create FAT image"

result=$(./virtfatfs-mount "${img_file}" rw)
media="$(echo $result | awk '{print $1}')"
loop="$(echo $result | awk '{print $2}')"

function cleanup() {
  result=$?
  ./virtfatfs-unmount "$loop"
  exit ${result}
}

trap cleanup EXIT ERR

echo "Media: $media"
echo "Loop:  $loop"
rsync --progress --recursive --executability --times ${data_dir}/* "${media}/"
sync "${media}/"
